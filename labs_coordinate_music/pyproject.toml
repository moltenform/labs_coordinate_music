

[project]
name = "labs_coordinate_music"
version = "0.9"
authors = [
  { name="Ben Fisher", email="shinerainseven@gmail.com" },
]
license = "GPL-3.0"
license-files = ["LICEN[CS]E*"]
description = "Help keep a local music library organized"
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
]
dependencies = [
  "shinerainsevenlib",
  "mutagen",
  "spotipy",
  "pyperclip",
]

[project.optional-dependencies]
dev = [
    "pylint",
    "ruff",
    "pytest",
    "pytest-mock",
]


[project.urls]
Homepage = "https://github.com/moltenform/labs_coordinate_music"
Issues = "https://github.com/moltenform/labs_coordinate_music/issues"

[tool.ruff]
line-length = 120
indent-width = 4
# Assume Python 3.8
target-version = "py38"
# tell ruff not to fix blank-lines-after-function-or-class

[tool.ruff.lint]
fixable = ["F403"]
unfixable = [
    # do not autoremove commented out code
    "ERA", 
    # blank-lines related rules
    "E301",
    "E302",
    "E303",
    "E304",
    "E305",
    "E306",
    "F401", # unused import
    "F841", # unused variables
    "PIE804", # unnecessary dict kwargs
]
extend-select = [
    "A",   # flake8-builtins
    'ASYNC', # async
    "B",   # flake8-bugbear
    'BLE', # flake8-blind-except
    "C4",  # flake8-comprehensions
    'COM',  # flake8-commas
    'DTZ', # flake8-datetimez
    'E',  # pycodestyle
    "ERA", # no commented out code
    'EXE', # flake8-executable
    'F',  # pyflakes
    'FLY',  # flynt
    'G',  # flake8-logging-format
    "I",   # isort
    'ICN', # https://github.com/joaopalmeiro/flake8-import-conventions
    'ISC', # https://pypi.org/project/flake8-implicit-str-concat/
    'LOG', # flake8-logging
    'PERF', # perflint
    "PIE", # flake8-pie
    "PGH", # pygrep
    'PLC',  # Pylint conventions
    'PLE',  # Pylint error
    'PLW',  # Pylint warnings
    'PT',  # https://pypi.org/project/flake8-pytest-style/
    'RET', # https://pypi.org/project/flake8-return/
    "RUF", # ruff checks
    'S',  # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    'SIM',  # https://pypi.org/project/flake8-simplify/
    'T',  # flake8-debugger
    'TRY',  # tryceratops
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    'ARG',  # flake8 unused arguments
    
    # leave disabled for now:
    # "N" pep8-naming
    # TCH flake8-type-checking
    # 'D',  # pydocstyle
    # 'N',  # pep8-naming
    # 'NPY', # numpy
    # 'PD', # pandas
    # 'PL',  # Full Pylint
    # 'PLR',  # Pylint refactor
    # 'PTH',  # flake8 use pathlib
]


ignore = [
    "F401", # imported but unused
    "F403", # 'from module import *' used; unable to detect undefined names
    "F405", # Name may be undefined, or it might have come from a star import
    "E302", # Expected 2 blank lines, found 0
    "E305", # blank-lines-after-function-or-class
    "E722", # Do not use bare 'except'
    "E731", # Do not assign a lambda expression to var
    "TID252", # prefer absolute imports
    "SIM201", # a != b not a == b
    "C408", # i prefer dict(a=b) instead of {a:b}
    "UP031", # i still have old code with '%2d' % x instead of f'{x}'
    "PGH004", # ok to have bare noqa
    "I001", # ok to have unsorted imports for now
    "SIM103", # ok to if x and y and z: return True instead of return x and y and z
    "UP028", # it wants yield from
    "SIM102", # nested if ok
    "SIM114", # it wants combined branches
    "SIM117", # it wants combined with statements
    "SIM108", # it wants ternary
    "SIM105", # it wants contextlib.suppress, cool but i don't want that to be mandatory
    "ISC003", # it implicit string concatenation within parens, i don't want that
    "E713", # ok to say either if a not in b and if not a in b
    "PIE810", # ok to not combine endswith(a, b) 
    "RUF001", # ok to have ambiguous-unicode-character-string
    "SIM300", # prefer no yoda condition
    "C405", # ok to not use fancy set() constructors
    # new
    "COM812", # ok to have no trailing comma
    "T201", # ok to have print()

    # for legacy code and py2 compat:
    "E402", # Module level import not at top of file
    "E228", # Missing whitespace around modulo operator
    "E401", # Multiple imports on one line
    "ERA001", # commented out code
    "RUF015", # single element slice
    "UP036", # it's ok to check for python2
    "UP025", # keep unicode prefix for py2 compat
    "UP008", # keep super(Base) for py2 compat
    "SIM115", # keep raw open() close() for less code churn in legacy code
    "ARG001", # unused argument

    # leave on:
    #"E128", # Continuation line under-indented for visual indent (not in ruff?)
    #"W504", # Line break occurred after a binary operator (not in ruff?)
]

# these might also be useful to disable:
# F405 ok to use a symbol from a import *
# W293 Blank line contains whitespace
# W391 Blank line at end of file

[tool.ruff.format]
quote-style = "single"
indent-style = "space"

[tool.ruff.lint.per-file-ignores]
"src/poetry/console/*" = [] 

# next rationalize these
[tool.pylint.'MESSAGES CONTROL']
disable = [
    #"C0103", # name styles
    "W0401", # wildcard imports
    "C0116", # missing docsstring
    "C0114", # module docstring
    "W0614", # unused import
    "R0911", # too many returns
    "R0912", # too many branches
    "C0415", # import outside top
    "W0611", # unused import
    "R0913", # too many args
    "C0209", # fstring
    "C0305", # newlines
    "W0702", # bare except
    "C0115", # no docstring
    "R1705", # unneeded elif
    "R1720", # unneeded elif
    "R0902", # too many attributes
    "E0401", # import err
    "C1802", # ok to say if len(lst)
    "R0914", # too many locals
    "R1735", # dict literal
    "R1737", # wants yield from
    "W0603", # global ok
    "R1716", # chained ok
    "W0718", # broad exception
    "W0108", # unnecessary lambda (false positives)
    "R1703", # i prefer return True
    "R0903", # too few methods
    "C0303", # whitespace
    "R0401", # cyclic import... aggressive and fires even when the cycle is within a function call (safe)
    "R1732", # use with to autoclose resources... consider fixing later
    "R0917", # it's not that bad to have many arguments
    "R1710", # too many if branches
    "C3001", # Lambda expression assigned to a variable
    #"W0201", # attributed-defined-outside-init
    "C0413", # import outside top
    "W1406", # no longer need u''
    "C0411", # standard import "os.path.join" should be placed before third party import "pytest" 
    "W0622", # a variable or function in your code is overriding a built-in Python name
    "W0612", # a variable has been defined but is not subsequently used 
    "W0719", # too general exception is being raised.
    "C0206", # recommends iterating over items()
    "W0311", # bad indentation
    "W0613", # unused-argument
    "R1723", # unnecessary else or elif block following an if statement that contains a break statement.
    "R0904", # class has too many public methods
    "R1725", # In Python 3, super() can be called without any arguments
    "R1724", # "Unnecessary 'else' after 'continue'
    "R0915", # Used when a function or method has too many statements
    "R1714", # color in ("red", "green", "blue")
    "R1702", # too-many-nested-blocks
    "W0707", # recommend raise from
]

max-line-length = 999



# The warning E1101 we want enabled because it's useful to catch missing functions.

[tool.shinerainsevenlib]
hide_init_while_linting = true
pylint_specific_ignore = [
    # skip this - we don't care about it for Bucket
    "E1101: Instance of 'Bucket' has no",
    # skip this - we don't care about it for fixtures
    "W0621: Redefining name 'fixture_",
    "Access to a protected member _get of",
    "Access to a protected member _get_id of",
]
rufflint_specific_ignore = [
    "Access to a protected member _get_id of",
]
autoformat_ignore = [
    'OUTSIDE'
]

[tool.yapf]

# styles: google, pep8, yapf, facebook
based_on_style = "facebook"
spaces_before_comment = 1
split_before_logical_operator = false
column_limit = 120
indent_width = 4

